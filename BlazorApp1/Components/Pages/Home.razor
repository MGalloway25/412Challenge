@page "/"

@rendermode InteractiveServer

@using System.Text.Json;
@using System.Net.Http
@using System.IO;

<h1>Verse of the Day</h1>

@if (!string.IsNullOrEmpty(PassageText))
{
    <div class="card my-4 shadow-sm">
        <div class="card-body">
            <blockquote class="blockquote mb-0">
                <p style="font-size:1.25rem;">@PassageText</p>
                <footer class="blockquote-footer">@Verse</footer>
            </blockquote>
        </div>
    </div>
    <!-- Log section for readers -->
    <div class="mt-4">
        <h5>Who has read today's verse?</h5>
        <ul>
            @foreach (var reader in Readers)
            {
                <li>@reader</li>
            }
        </ul>
        <input @bind="NewReader" placeholder="Enter your name" class="form-control mb-2" />
        <button class="btn btn-primary" @onclick="MarkAsRead">Mark as Read</button>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="text-danger mt-2">@ErrorMessage</div>
        }
    </div>

    <!-- Footer -->

}

@code {
    private string? PassageText;
    private string? Verse;
    private List<string> Readers = new();
    private string NewReader = string.Empty;
    private List<string> StudentNames = new();
    private string ErrorMessage = string.Empty;
    private string LogFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Logs");
    private readonly string LogFileName = $"Log-{DateTime.Now:yyyy-MM-dd}.txt";

    private readonly Random _random = new();
    private readonly Guid _instanceId = Guid.NewGuid();

    [Inject]
    public HttpClient Http { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchPassage();    
            await LoadStudentNames();
            await LoadReadersFromLog();
            StateHasChanged();
        }
    }
    private async Task LoadReadersFromLog()
    {
        var logPath = Path.Combine(LogFolder, LogFileName);
        if (File.Exists(logPath))
        {
            try
            {
                var json = await File.ReadAllTextAsync(logPath);
                var logEntries = JsonSerializer.Deserialize<List<LogEntry>>(json) ?? new();
                Readers = logEntries.Select(e => e.Name).Distinct(StringComparer.OrdinalIgnoreCase).ToList();
            }
            catch { }
        }
    }
    private async Task LoadStudentNames()
    {
        try
        {
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Assets", "Config.txt");
            if (File.Exists(filePath))
            {
                var json = await File.ReadAllTextAsync(filePath);
                var doc = JsonDocument.Parse(json);
                if (doc.RootElement.TryGetProperty("students", out var studentsElem) && studentsElem.ValueKind == JsonValueKind.Array)
                {
                    StudentNames = studentsElem.EnumerateArray().Select(e => e.GetString() ?? string.Empty).Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
                }
            }
        }
        catch { /* ignore errors for now */ }
    }

    private async Task FetchPassage()
    {
        try
        {
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Assets", "Config2.txt");
            if (File.Exists(filePath))
            {
                var json = await File.ReadAllTextAsync(filePath);
                var passages = JsonSerializer.Deserialize<List<PassageItem>>(json);
                var today = DateTime.Now.ToString("yyyy-MM-dd");
                var passage = passages?.FirstOrDefault(p => p.Date == today);
                if (passage != null)
                {
                    PassageText = passage.VerseText;
                    Verse = passage.BibleVerse;
                }
                else
                {
                    PassageText = "No passage found for today.";
                    Verse = string.Empty;
                }
            }
            else
            {
                PassageText = "Config2.txt not found.";
                Verse = string.Empty;
            }
        }
        catch (Exception ex)
        {
            PassageText = $"Error: {ex.Message}";
            Verse = string.Empty;
        }
    }

    private class PassageItem
    {
        public string BibleVerse { get; set; } = string.Empty;
        public string VerseText { get; set; } = string.Empty;
        public string Date { get; set; } = string.Empty;
    }

        private async void MarkAsRead()
        {
            ErrorMessage = string.Empty;
            var name = NewReader.Trim();
            if (string.IsNullOrWhiteSpace(name)) return;
            if (!StudentNames.Any(s => string.Equals(s, name, StringComparison.OrdinalIgnoreCase)))
            {
                ErrorMessage = "Name not found in student list.";
                return;
            }
            if (!Readers.Contains(name))
            {
                Readers.Add(name);
                NewReader = string.Empty;
                await LogReadAsync(name);
            }
        }

        private async Task LogReadAsync(string name)
        {
            var logPath = Path.Combine(LogFolder, LogFileName);
            List<LogEntry> logEntries = new();
            if (File.Exists(logPath))
            {
                var json = await File.ReadAllTextAsync(logPath);
                try
                {
                    logEntries = JsonSerializer.Deserialize<List<LogEntry>>(json) ?? new();
                }
                catch { }
            }
            if(logEntries.Any(e => e.Name.Equals(name, StringComparison.OrdinalIgnoreCase)))
            {
                return; // Already logged
            }
            else
            {
                logEntries.Add(new LogEntry { Name = name, Timestamp = DateTime.Now });
                var newJson = JsonSerializer.Serialize(logEntries, new JsonSerializerOptions { WriteIndented = true });
                await File.WriteAllTextAsync(logPath, newJson);
            }
        }

        private class LogEntry
        {
            public string Name { get; set; } = string.Empty;
            public DateTime Timestamp { get; set; }
        }
}
