@page "/"

@rendermode InteractiveServer

@using System.Text.Json;
@using System.Net.Http

<h1>Verse of the Day</h1>

@if (!string.IsNullOrEmpty(PassageText))
{
    <div class="card my-4 shadow-sm">
        <div class="card-body">
            <blockquote class="blockquote mb-0">
                <p style="font-size:1.25rem;">@PassageText</p>
                <footer class="blockquote-footer">@Verse</footer>
            </blockquote>
        </div>
    </div>
}

@code {
    private string? PassageText;
    private string? Verse;
    private const string ApiKey = "3a338e2ef0ebe398e8f2960108f9a1b770ec92fd";

    private readonly List<string> InspirationalVerses = new()
    {
        "Romans 15:13",
        "Philippians 4:13",
        "Jeremiah 29:11",
        "Isaiah 40:31",
        "Joshua 1:9",
        "Psalm 23:4",
        "Proverbs 3:5-6",
        "Matthew 11:28-30",
        "John 16:33",
        "2 Timothy 1:7",
        "Psalm 46:1",
        "Romans 8:28",
        "Psalm 27:1",
        "Deuteronomy 31:6",
        "1 Peter 5:7",
        "Psalm 118:24",
        "Matthew 6:33",
        "Isaiah 41:10",
        "Psalm 37:4",
        "Lamentations 3:22-23",
        "James 1:2-4",
        "1 Corinthians 16:13-14",
        "Psalm 121:1-2",
        "Hebrews 11:1",
        "Psalm 34:8",
        "Ephesians 2:8-9",
        "Psalm 139:14",
        "Colossians 3:23-24",
        "Psalm 19:14",
        "1 John 4:18",
        "Psalm 16:8",
        "Matthew 19:26",
        "Psalm 56:3",
        "Galatians 6:9",
        "Psalm 91:1-2",
        "Micah 6:8",
        "Psalm 55:22",
        "Romans 12:2",
        "Psalm 30:5",
        "1 Thessalonians 5:16-18",
        "Psalm 100:4-5",
        "Isaiah 26:3",
        "Psalm 119:105",
        "Matthew 5:16",
        "Psalm 62:1-2",
        "Proverbs 18:10",
        "Psalm 42:11",
        "John 14:27",
        "Psalm 31:24",
        "Romans 5:3-5",
        "Psalm 28:7",
        "Isaiah 43:2",
        "Psalm 32:7-8",
        "Matthew 7:7",
        "Psalm 46:10",
        "1 Corinthians 10:13",
        "Psalm 73:26",
        "Isaiah 40:29",
        "Psalm 20:4",
        "2 Corinthians 12:9",
        "Psalm 27:14",
        "John 8:12",
        "Psalm 18:2",
        "Romans 10:9",
        "Psalm 145:18-19",
        "Ephesians 3:20-21",
        "Psalm 33:20-22",
        "Matthew 28:20",
        "Psalm 126:5-6",
        "Hebrews 13:5-6",
        "Psalm 40:1-3",
        "James 4:7-8",
        "Psalm 63:1",
        "1 John 1:9",
        "Psalm 84:11",
        "Philippians 1:6",
        "Psalm 138:3",
        "Isaiah 12:2",
        "Psalm 86:5",
        "Romans 15:4",
        "Psalm 94:19",
        "2 Corinthians 5:17",
        "Psalm 103:2-5",
        "Matthew 21:22",
        "Psalm 4:8",
        "1 Peter 1:3",
        "Psalm 9:9-10",
        "Proverbs 16:3",
        "Psalm 27:13",
        "Isaiah 54:10",
        "Psalm 138:7",
        "Romans 8:38-39",
        "Psalm 121:7-8",
        "Hebrews 4:16"
    };
    private readonly Random _random = new();
    private readonly Guid _instanceId = Guid.NewGuid();

    [Inject]
    public HttpClient Http { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           await FetchPassage();    
            StateHasChanged();
        }
    }

    private async Task FetchPassage()
    {
        try
        {
            var randomIndex = DateTime.Now.Day;
            var selectedVerse = InspirationalVerses[randomIndex];
            var query = System.Web.HttpUtility.UrlEncode(selectedVerse);
            var request = new HttpRequestMessage(HttpMethod.Get, $"https://api.esv.org/v3/passage/text/?q={query}&include-passage-references=false&include-footnotes=false");
            request.Headers.Add("Authorization", $"Token {ApiKey}");
            var response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var json = await response.Content.ReadAsStringAsync();
            var result = JsonSerializer.Deserialize<EsVResponse>(json);
            PassageText = result?.passages?.FirstOrDefault() ?? "No passage found.";
            Verse = result?.canonical ?? selectedVerse;
        }
        catch (Exception ex)
        {
            PassageText = $"Error: {ex.Message}";
        }
    }

    private class EsVResponse
    {
        public List<string>? passages { get; set; }
        public string? canonical { get; set; }
    }
}
